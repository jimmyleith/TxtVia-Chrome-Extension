/*globals $,chrome,localStorage,console,window,setTimeout,setInterval,clearTimeout */

var TxtVia = {};

// App Types
TxtVia.CHROME = "Chrome";
TxtVia.SAFARI = "Safari";
TxtVia.FIREFOX = "FireFox";
TxtVia.UNKNOWN = "Unknown";
TxtVia.init = function () {
    $.support.cors = true;
    $.ajaxSetup({
        cache: false,
        async: true,
        crossDomain: true,
        dataType: "json",
        timeout: 4000
    });
    if (window.chrome) {
        try {
            TxtVia.appID = chrome.i18n.getMessage("@@extension_id");
        } catch (eer) {
            console.error("[Chrome] Can't determand extension_id");
        }
        TxtVia.appName = "Google Chrome";
        TxtVia.appType = TxtVia.CHROME;
    } else {
        TxtVia.appID = "0";
        TxtVia.appName = "Unknown Client";
        TxtVia.appType = TxtVia.UNKNOWN;
    }
    TxtVia.Pusher = {};
    TxtVia.BeaconPush = {};
    TxtVia.env = "development";
    TxtVia.PushMethod = "Pusher";
    // TxtVia.env = "staging";
    switch (TxtVia.env) {
    case "development":
        TxtVia.url = "http://localhost:8080";
        TxtVia.Pusher.webSocketID = "c9351524b47769e60be7";
        TxtVia.BeaconPush.webSocketID = "1adeccce";
        break;
    case "staging":
        TxtVia.url = "http://staging.txtvia.com";
        TxtVia.Pusher.webSocketID = "02364a48c5da78fd5244";
        TxtVia.BeaconPush.webSocketID = "1adeccce";
        break;
    default:
        TxtVia.url = "http://txtvia.com";
        TxtVia.Pusher.webSocketID = "c0f2d772bdcdd2e04aa3";
        TxtVia.BeaconPush.webSocketID = "1adeccce";
        break;
    }



    TxtVia.Storage();
    TxtVia.WebDB.open();
    TxtVia.WebDB.createTables();
    if (TxtVia.uriParams('auth_token')) {
        localStorage.authToken = TxtVia.uriParams('auth_token');
    }
    TxtVia.UNIQUE_ID = TxtVia.appType + ":" + TxtVia.appID + ":" + localStorage.authToken;
};
TxtVia.uriParams = function (name) {
    var results = new RegExp('[\\?&]' + name + '=([^&#]*)').exec(window.location.href);
    try {
        return results[1] || 0;
    } catch (err) {
        return null;
    }
};
TxtVia.TextUtil = {};
TxtVia.TextUtil.mobileNumber = function (number) {
    var code = JSON.parse(localStorage.locale).country_calling;
    return number.replace(/\s/, '').replace(/^0/, code);
};
// var TxtVia = (function() {
//     return {
//         init: function() {
//             if (window.chrome) {
//                 try {
//                     TxtVia.appID = chrome.i18n.getMessage("@@extension_id");
//                 } catch(eer) {
//                     console.error("[Chrome] Can't determand extension_id");
//                 }
//                 TxtVia.appName = "Google Chrome";
//             } else {
//                 TxtVia.appID = "0";
//                 TxtVia.appName = "Unknown Client";
//             }
// 
//             // TxtVia.env = "development";
//             // TxtVia.env = "staging";
//             switch (TxtVia.env) {
//             case "development":
//                 TxtVia.url = "http://localhost:8080";
//                 TxtVia.webSocketID = "c9351524b47769e60be7";
//                 break;
//             case "staging":
//                 TxtVia.url = "http://staging.txtvia.com";
//                 TxtVia.webSocketID = "02364a48c5da78fd5244";
//                 break;
//             default:
//                 TxtVia.url = "http://txtvia.com";
//                 TxtVia.webSocketID = "c0f2d772bdcdd2e04aa3";
//                 break;
//             }
//             TxtVia.Storage.setup();
//             // TxtVia.Process.setupDevice();
//             // TxtVia.connection.establish();
// 
//             // // Start worker
//             // setInterval(TxtVia.Process.pendingMessages, 5000);
//             // try {
//             //     if (TxtVia.getParams("auth_token")) {
//             //         console.log("got new auth_token");
//             //         localStorage.authToken = TxtVia.getParams("auth_token");
//             //         TxtVia.Storage.download();
//             //     }
//             // } catch(e) {}
// 
//             // Doesn't work on chrome :(
//             // window.addEventListener("storage", TxtVia.Event.storage, false);
//             /*
//             $.ajaxSetup({
//                 beforeSend: function() {
//                     var opts = {
//                       lines: 12, // The number of lines to draw
//                       length: 0, // The length of each line
//                       width: 4, // The line thickness
//                       radius: 10, // The radius of the inner circle
//                       color: '#fff', // #rbg or #rrggbb
//                       speed: 1, // Rounds per second
//                       trail: 100, // Afterglow percentage
//                       shadow: true // Whether to render a shadow
//                     };
//                     if(typeof(Spinner) === 'function'){
//                         var spinner = new Spinner(opts).spin();
//                         $('.loader').append(spinner.el);
//                     }
//                 },
//                 error: function(e, txt) {
//                     if (e.status === 401) {
//                         localStorage.authToken = "";
//                         localStorage.clientId = 0;
//                         if(window.PopUp){
//                             PopUp.UI.flash("red","You've been logged out, please re-authenticate.");
//                         }
//                         PopUp.Actions.loginLink();
//                         // $.ajax({
//                         //     url:TxtVia.url + "/sign_out",
//                         //     type:"GET",
//                         //     dataType: "html",
//                         //     crossDomain: true,
//                         //     cache: false,
//                         //     async: false,
//                         //     beforeSend:function(){
//                         //       console.log("reauthing");  
//                         //     },
//                         //     success:function(){
//                         //         chrome.tabs.create({
//                         //             url: TxtVia.url + '/sign_in'
//                         //         });
//                         //     }
//                         // });
// 
//                     }
//                 },
//                 complete: function() {
//                     $(".loader").empty();
//                 }
//             });
//             */
//         },
//         getParams: function(name) {
//             var results = new RegExp('[\\?&]' + name + '=([^&#]*)').exec(window.location.href);
//             return results[1] || 0;
//         },
//         Event: {
//             storage: function(e) {
//                 console.log("storage accessed:" + e.key);
//                 /*
//                 switch(e.key){
//                     case "messages":
//                         var message = localStorage.messages[localStorage.messages.length-1].message;
//                         if(message.sent_at){                                
//                             TxtVia.Notification.messageSent(message);
//                         }
//                         if(message.received_at){
//                             TxtVia.Notification.newMessage(message);
//                         }
//                     break;
//                     case "clientId":
//                         TxtVia.Notification.clientRegistered();
//                         TxtVia.connection.establish();
//                     break;
//                 }*/
// 
//             }
//         },
//         Notification: {
//             newMessage: function(message) {
//                 webkitNotifications.createNotification(
//                 '/images/icon48.png',
//                 'New Message Received',
//                 message.recipient + ' said:' + message.body
//                 ).show();
//                 localStorage.unReadMessages = parseInt(localStorage.unReadMessages, 10) + 1;
// 
//                 if (window.chrome) {
//                     (function() {
//                         var value = parseInt(localStorage.unReadMessages, 10);
//                         if (value === 0) {
//                             text = "";
//                         } else {
//                             text = value;
//                         }
//                         // wap
//                         chrome.browserAction.setBadgeText({
//                             text: text.toString()
//                         });
//                     })();
//                 }
//             },
//             messageCountClear: function() {
//                 if (window.chrome) {
//                     (function() {
//                         var value = parseInt(localStorage.unReadMessages, 10);
//                         if (value === 0) {
//                             text = "";
//                         } else {
//                             text = value;
//                         }
//                         // wap
//                         chrome.browserAction.setBadgeText({
//                             text: text.toString()
//                         });
//                     })();
//                 }
//             },
//             messageSent: function(message) {
//                 webkitNotifications.createNotification(
//                 '/images/icon48.png',
//                 "Message has been Sent",
//                 "Your message has been sent to " + message.recipient
//                 ).show();
//             },
//             clientRegistered: function(device) {
//                 webkitNotifications.createNotification(
//                 '/images/icon48.png',
//                 "Client Registered",
//                 "Your client has been registered and you can now send Messages."
//                 ).show();
//             }
//         },
//         Process: {
//             setupDevice: function() {
//                 if (localStorage.clientId === "0") {
//                     $.ajax({
//                         url: TxtVia.url + "/devices.json",
//                         type: "POST",
//                         dataType: "json",
//                         crossDomain: true,
//                         cache: false,
//                         async: false,
//                         data: "unique_id=" + TxtVia.appID + ":" + localStorage.authToken + "&type=client&name=" + encodeURIComponent(TxtVia.appName) + "&auth_token=" + localStorage.authToken,
//                         success: function(data) {
//                             localStorage.clientId = data.device.id;
//                             TxtVia.Notification.clientRegistered();
//                             TxtVia.connection.establish();
//                             TxtVia.Storage.download();
//                         },
//                         failure: function() {
//                             alert("Railed to register Client with TxtVia");
//                         }
//                     });
//                 }else{
//                     TxtVia.connection.establish();
//                     TxtVia.Storage.download();
//                 }
//             },
// 
//         },
//         Storage: {
//             setup: function() {
//                 if (!localStorage.messages) {
//                     localStorage.messages = JSON.stringify([]);
//                     // window.addEventListener("storage", handle_storage, false);
//                 }
//                 if (!localStorage.devices) {
//                     localStorage.devices = JSON.stringify([]);
//                     // window.addEventListener("storage", handle_storage, false);
//                 }
//                 if (!localStorage.contacts) {
//                     localStorage.contacts = JSON.stringify([]);
//                     // window.addEventListener("storage", handle_storage, false);
//                 }
//                 if (!localStorage.unReadMessages) {
//                     localStorage.unReadMessages = 0;
//                 }
//                 if (!localStorage.authToken) {
//                     localStorage.authToken = "";
//                 }
//                 if (!localStorage.clientId) {
//                     localStorage.clientId = 0;
//                 }
//                 if (!localStorage.pendingMessages) {
//                     localStorage.pendingMessages = JSON.stringify([]);
//                 }
//                 if(!localStorage.settings){
//                     localStorage.settings = {};
//                     localStorage.settings.autoHideNotifications = true;
//                 }
//                 // if (TxtVia.server) {
//                 //     if (TxtVia.server.connected) {
//                 //         window.addEventListener("storage", PopUp.UI.alert, false);
//                 //     }
//                 // }
// 
//             },
//             download: function() {
//                 $.ajax({
//                     url: TxtVia.url + "/contacts.json?auth_token=" + localStorage.authToken,
//                     type: "GET",
//                     dataType: "json",
//                     success: function(data) {
//                         if (data) {
//                             localStorage.contacts = JSON.stringify(data);
//                         }
//                     }
//                 });
//                 $.ajax({
//                     url: TxtVia.url + "/messages.json?auth_token=" + localStorage.authToken,
//                     type: "GET",
//                     dataType: "json",
//                     success: function(data) {
//                         // should we delete and download a fresh set of messages?
//                         // in this case, yes!
//                         if (data.devices) {
//                             localStorage.devices = JSON.stringify(data.devices);
//                             if (window.PopUp) {
//                                 PopUp.UI.deviceList();
//                             }
//                         }
//                         if (data.messages) {
//                             localStorage.messages = JSON.stringify(data.messages);
//                             if (window.PopUp) {
//                                 PopUp.Process.view();
//                             }
//                         }
//                     }
//                 });
//             }
//         }
//     };
// })();

/**
 * @depend txtvia.js
 **/
/*globals $, TxtVia, openDatabase,localStorage,console,alert,window,setTimeout,setInterval,clearTimeout */
TxtVia.WebDB = {};
TxtVia.WebDB.db = null;
TxtVia.WebDB.open = function () {
    var dbSize = 5 * 1024 * 1024;
    TxtVia.WebDB.db = openDatabase("TxtVia", "1.0", "Browser based SMS client", dbSize);
};
TxtVia.WebDB.onError = function (tx, e) {
    if (!e.CONSTRAINT_ERR) {
        console.error(e);
        alert("Awe damn, Something went wrong: " + e.message + "\n\rIt would probly be a good idea contact support. \n\rhttp://txtvia.com/support");
    }
};
TxtVia.WebDB.onSuccess = function (tx, r) {
    // :todo  
};
TxtVia.WebDB.createTables = function () {
    TxtVia.WebDB.db.transaction(function (tx) {
        // tx.executeSql('CREATE TABLE IF NOT EXISTS pending_messages (id INTEGER PRIMARY KEY ASC, ' +
        //                 'recipient TEXT, ' +
        //                 'body TEXT, ' +
        //                 'sent_at DATETIME)', [], function(){
        //                     console.log('[TxtVia.WebDB.createTables] pending_messages created');
        //                 }, TxtVia.WebDB.onError);
        tx.executeSql('CREATE TABLE IF NOT EXISTS messages (id INTEGER PRIMARY KEY ASC, message_id INTEGER UNIQUE NOT NULL, device_id INTEGER NOT NULL, client_id INTEGER, recipient TEXT NOT NULL, body TEXT NOT NULL, read INTEGER, messaged_at DATEIME NOT NULL, sent_at DATETIME, received_at DATETIME, created_at DATETIME)', [], function (tx, r) {
            console.log('[TxtVia.WebDB.createTables] messages created');
        }, TxtVia.WebDB.onError);
        tx.executeSql('CREATE TABLE IF NOT EXISTS devices (id INTEGER PRIMARY KEY ASC, ' + 'name TEXT, ' + 'device_type TEXT, ' + 'unique_id TEXT UNIQUE NOT NULL, ' + 'carrier TEXT)', [], function (tx, r) {
            console.log('[TxtVia.WebDB.createTables] devices created');
        }, TxtVia.WebDB.onError);
        tx.executeSql('CREATE TABLE IF NOT EXISTS contacts ( ' + 'name TEXT, ' + 'number TEXT UNIQUE NOT NULL)', [], function (tx, r) {
            console.log('[TxtVia.WebDB.createTables] contacts created');
        }, TxtVia.WebDB.onError);
    });
};
TxtVia.WebDB.purge = function (createTables) {
    localStorage.clear();
    TxtVia.WebDB.db.transaction(function (tx) {
        tx.executeSql('DROP TABLE devices', [], function () {
            console.log("[TxtVia.WebDB.purge] success");
        }, function (tx, e) {
            console.error("[TxtVia.WebDB.purge] Failed");
            console.error(e);
        });
        tx.executeSql('DROP TABLE messages', [], function () {
            console.log("[TxtVia.WebDB.purge] success");
        }, function (tx, e) {
            console.error("[TxtVia.WebDB.purge] Failed");
            console.error(e);
        });
        tx.executeSql('DROP TABLE contacts', [], function () {
            console.log("[TxtVia.WebDB.purge] success");
        }, function (tx, e) {
            console.error("[TxtVia.WebDB.purge] Failed");
            console.error(e);
        });
    });
    if (createTables) {
        TxtVia.WebDB.createTables();
    }
};
TxtVia.WebDB.insertInto = {};
TxtVia.WebDB.insertInto.messages = function (message, callback) {
    TxtVia.WebDB.db.transaction(function (tx) {
        tx.executeSql('INSERT INTO messages(recipient, body, message_id, device_id, client_id, messaged_at, sent_at, received_at, created_at) VALUES (?,?,?,?,?,?,?,?,?)', [TxtVia.TextUtil.mobileNumber(message.recipient), message.body, message.id, message.device_id, message.client_id, message.messaged_at, message.sent_at, message.received_at, message.created_at], callback, TxtVia.WebDB.onError);
    });
};
TxtVia.WebDB.insertInto.devices = function (device, callback) {
    TxtVia.WebDB.db.transaction(function (tx) {
        tx.executeSql('INSERT INTO devices(name, device_type, carrier, unique_id) VALUES (?,?,?,?)', [device.name, device.device_type, device.carrier, device.unique_id], callback, TxtVia.WebDB.onError);
    });
};
TxtVia.WebDB.insertInto.contacts = function (contact, callback) {
    TxtVia.WebDB.db.transaction(function (tx) {
        tx.executeSql('INSERT INTO contacts(name, number) VALUES (?,?)', [contact.name, TxtVia.TextUtil.mobileNumber(contact.number)], callback, TxtVia.WebDB.onError);
    });
};
TxtVia.WebDB.lastReceivedMessage = function (callback) {
    TxtVia.WebDB.db.transaction(function (tx) {
        tx.executeSql("SELECT * FROM messages m LEFT JOIN contacts c On c.number = m.recipient ORDER BY id DESC LIMIT 1", [], callback, TxtVia.WebDB.onError);
    });
};
TxtVia.WebDB.deletePendingMessage = function (id) {
    TxtVia.WebDB.db.transaction(function (tx) {
        tx.executeSql('DELETE FROM pending_messages WHERE id = ?', [id], null, TxtVia.WebDB.onError);
    });
};

TxtVia.WebDB.getConversations = function (callback) {
    TxtVia.WebDB.db.transaction(function (tx) {
        tx.executeSql('SELECT * FROM messages m LEFT JOIN contacts c ON c.number = m.recipient GROUP BY m.recipient ORDER BY m.created_at DESC', [], function (tx, rs) {
            var i;
            for (i = 0; i < rs.rows.length; i++) {
                callback(rs.rows.item(i));
            }
        }, TxtVia.WebDB.onError);
    });
};
TxtVia.WebDB.getContacts = function (callback) {
    TxtVia.WebDB.db.transaction(function (tx) {
        tx.executeSql('SELECT * FROM contacts ORDER BY name DESC', [], function (tx, rs) {
            var i, array = [],hash;
            for (i = 0; i < rs.rows.length; i++) {
                hash = {
                    label:rs.rows.item(i).name,
                    value:rs.rows.item(i).number
                };
                array.push(hash);
            }
            callback(array);
        }, TxtVia.WebDB.onError);
    });
};
TxtVia.WebDB.getMessages = function (recipient, callback) {
    TxtVia.WebDB.db.transaction(function (tx) {
        tx.executeSql('SELECT * FROM `messages` m LEFT JOIN contacts c ON c.number = m.recipient WHERE m.`recipient` = ? ORDER BY `messaged_at` ASC', [recipient], callback, TxtVia.WebDB.onError);
    });
};
TxtVia.WebDB.getDevices = function (callback) {
    TxtVia.WebDB.db.transaction(function (tx) {
        tx.executeSql('SELECT * FROM devices ORDER BY `name` ASC', [], callback, TxtVia.WebDB.onError);
    });
};
TxtVia.Storage = function () {
    if (!localStorage.unReadMessages) {
        localStorage.unReadMessages = 0;
    }
    if (!localStorage.firstLaunch) {
        localStorage.firstLaunch = true;
    }
    if (!localStorage.authToken) {
        localStorage.authToken = "";
    }
    if (!localStorage.googleToken) {
        localStorage.googleToken = "";
    }
    if (!localStorage.clientId) {
        localStorage.clientId = 0;
    }
    if (!localStorage.pendingMessages) {
        localStorage.pendingMessages = JSON.stringify([]);
    }
    if (!localStorage.autoHideNotifications) {
        localStorage.autoHideNotifications = true;
    }
    if (!localStorage.enableSounds){
        localStorage.enableSounds = true;
    }
    if (!localStorage.newMessageSound){
        localStorage.newMessageSound = 'newMessage.mp3';
    }
    if (!localStorage.locale) {
        localStorage.locale = JSON.stringify({
            country_code: 'GB',
            country_calling: '+44'
        });
    }
};

/*globals $, TxtVia, chrome, webkitNotifications, Pusher, Beacon, localStorage,console,window,setTimeout,setInterval,clearTimeout */
/**
 * @depend storage.js
 **/

var Background = {};
Background.init = function () {
    TxtVia.init();
    if ($.parseJSON(localStorage.clientID) === 0) {
        Background.Process.Post.client();
    }
    try {
        chrome.extension.onRequest.addListener(function (request, sender, callback) {
            if (request.sync) {
                Background.Process.fullDownload(callback);
            } else {
                console.log(request);
            }
        });
    } catch (e) {
        console.error("[Background.init] onRequest listener failed");

    }
    Background.Process.Post.messages();
    Background.connection();
};
Background.isError = false;
Background.Process = {
    isError: false,
    completed: 0
};
Background.Process.Post = {};
Background.Process.Post.messagesTries = 0;
Background.Process.Post.messages = function () {
    var pendingMessages = $.parseJSON(localStorage.pendingMessages);
    if (pendingMessages.length > 0 && window.navigator.onLine && localStorage.authToken) {
        console.log("[Background.Process.message] preparing to send message");
        $.ajax({
            url: TxtVia.url + "/messages.json",
            type: "POST",
            data: pendingMessages[0].data + "&sent_at=" + encodeURIComponent(new Date()) + "&client_id=" + localStorage.clientId + "&auth_token=" + localStorage.authToken,
            success: function (data) {
                Background.Process.Post.messagesTries = 0;
                console.log("[Background.Process.message] message sent");
                Background.Process.isError = false;

                Background.notify.message.sent(data);
                TxtVia.WebDB.insertInto.messages(data, function(){
                    chrome.extension.sendRequest({
                        message: data
                    },function(){
                        console.log("[Background.Process.Post.messages] sent to display");
                    });
                });
                // Update UI with success noteice, and new message in conversation.
                
                pendingMessages.shift();
                localStorage.pendingMessages = JSON.stringify(pendingMessages);
                localStorage.pendingMessages = JSON.stringify(pendingMessages);
                // Double kill yeah!
            },
            error: function () {
                Background.Process.Post.messagesTries = Background.Process.Post.messagesTries + 1;
                if (Background.Process.isError === false) {
                    Background.notify.message.failed(pendingMessages[0]);
                    Background.Process.isError = true;
                }
                if(Background.Process.Post.messagesTries >= 5){
                    Background.notify.message.skipped(pendingMessages[0]);
                    pendingMessages.shift();
                    localStorage.pendingMessages = JSON.stringify(pendingMessages);
                    localStorage.pendingMessages = JSON.stringify(pendingMessages);
                    Background.Process.isError = false;
                }
            },
            complete: function () {
                setTimeout(Background.Process.Post.messages, 100);
            }
        });
    } else {
        setTimeout(Background.Process.Post.messages, 100);
    }
};
Background.Process.Post.client = function () {
    $.ajax({
        url: TxtVia.url + "/devices.json",
        type: "POST",
        data: "unique_id=" + TxtVia.UNIQUE_ID + "&type=client&name=" + encodeURIComponent(TxtVia.appName) + "&auth_token=" + localStorage.authToken,
        success: function (data) {
            localStorage.clientId = data.id;
            Background.notify.client.success(data);
        },
        error: function (e, s, t) {
            if (e.status === 422) {
                Background.Process.Get.device();
            } else {
                console.error("[Background.Process.Post.client] failed : " + e.responseText);
                Background.notify.client.failed();
            }
        }
    });
};

Background.Process.Get = {};
Background.Process.Get.googleToken = function () {
    $.ajax({
        url: TxtVia.url + "/contacts/token.json?auth_token=" + localStorage.authToken,
        type: "GET",
        success: function (data) {
            localStorage.googleToken = data.get_token;
        },
        error: function (e) {
            console.error("[Background.Process.Get.googleToken] failed : " + e.responseText);
        }
    });
};
Background.Process.Get.contacts = function () {
    $.ajax({
        url: TxtVia.url + "/contacts.json?auth_token=" + localStorage.authToken,
        type: "GET",
        success: function (data) {
            if (data) {
                $.each(data, function () {
                    var contact = {
                        name: this.label,
                        number: this.value
                    };
                    TxtVia.WebDB.insertInto.contacts(contact, null);
                });
            }
            Background.Process.completed = Background.Process.completed + 1;
        },
        error: function (e) {
            console.error("[Background.Process.Get.contacts] failed : " + e.responseText);
        }
    });
};
Background.Process.Get.messages = function () {
    $.ajax({
        url: TxtVia.url + "/messages.json?auth_token=" + localStorage.authToken,
        type: "GET",
        success: function (data) {
            $.each(data.devices, function () {
                TxtVia.WebDB.insertInto.devices(this);
            });
            $.each(data.messages, function () {
                TxtVia.WebDB.insertInto.messages(this);
            });
            Background.Process.completed = Background.Process.completed + 1;
        },
        error: function (e) {
            console.error("[Background.Process.Get.messages] failed : " + e.responseText);
        }
    });
};
Background.Process.Get.device = function () {
    $.ajax({
        url: TxtVia.url + "/devices/" + TxtVia.UNIQUE_ID + ".json",
        type: "GET",
        success: function (data) {
            localStorage.clientId = data.id;
            Background.notify.client.restored(data);
        },
        error: function (e) {
            console.error("[Background.Process.Get.device] failed : " + e.responseText);
        }
    });
};
Background.Process.fullDownload = function (callback) {
    Background.Process.completed = 0;
    Background.Process.Get.contacts();
    Background.Process.Get.messages();
    function reDo(){
        if (Background.Process.completed >= 2) {
            Background.notify.syncComplete();
            if (callback) {
                callback();
            }
            Background.Process.completed = 0;
        } else {
            setTimeout(reDo, 500);
        }
    }
    reDo();
};

Background.notify = {};
Background.notify.newMessage = function (message) {
    var notification = webkitNotifications.createNotification(chrome.extension.getURL('/images/icon48.png'), "New message from " + message.name, message.body);
    notification.ondisplay = function () {
        if($.parseJSON(localStorage.enableSounds)){
            sound = new Audio(chrome.extension.getURL(localStorage.newMessageSound));
            sound.play();
        }
        if ($.parseJSON(localStorage.autoHideNotifications)) {
            setTimeout(function () {
                notification.cancel();
            }, 10000);
        }
    };
    notification.onclick = function () {
        chrome.tabs.create({
            url: chrome.extension.getURL('popup.html')
        });
        notification.cancel();
    };
    notification.show();
    localStorage.unReadMessages = parseInt(localStorage.unReadMessages, 10) + 1;
    chrome.browserAction.setBadgeText({
        text: localStorage.unReadMessages === "0" ? localStorage.unReadMessages : ""
    });
};
Background.notify.newDevice = function (device) {
    var notification = webkitNotifications.createNotification(chrome.extension.getURL('/images/icon48.png'), "Congradulations", "You have successfully setup " + device.name + " with TxtVia.");
    notification.ondisplay = function () {
        if($.parseJSON(localStorage.enableSounds)){
            sound = new Audio(chrome.extension.getURL('done.mp3'));
            sound.play();
        }
        if ($.parseJSON(localStorage.autoHideNotifications)) {
            setTimeout(function () {
                notification.cancel();
            }, 10000);
        }
    };
    notification.onclick = function () {
        chrome.tabs.create({
            url: chrome.extension.getURL('popup.html')
        });
        notification.cancel();
    };
    notification.show();
};

Background.notify.client = {};
Background.notify.client.success = function (device) {
    var notification = webkitNotifications.createNotification(chrome.extension.getURL('/images/icon48.png'), "Congradulations", "You have successfully setup " + device.name + " with TxtVia.");

    notification.ondisplay = function () {
        if($.parseJSON(localStorage.enableSounds)){
            sound = new Audio(chrome.extension.getURL('done.mp3'));
            sound.play();
        }
        if ($.parseJSON(localStorage.autoHideNotifications)) {
            setTimeout(function () {
                notification.cancel();
            }, 10000);
        }
    };
    notification.onclick = function () {
        notification.cancel();
    };
    notification.show();
};
Background.notify.client.restored = function (device) {
    var notification = webkitNotifications.createNotification(chrome.extension.getURL('/images/icon48.png'), "Welcome Back", "You have successfully restored TxtVia for " + device.name);
    notification.ondisplay = function () {
        if($.parseJSON(localStorage.enableSounds)){
            sound = new Audio(chrome.extension.getURL('done.mp3'));
            sound.play();
        }
        if ($.parseJSON(localStorage.autoHideNotifications)) {
            setTimeout(function () {
                notification.cancel();
            }, 10000);
        }
    };
    notification.onclick = function () {
        notification.cancel();
    };
    notification.show();
};
Background.notify.client.failed = function (status) {
    var notification, message, action;
    switch (status) {
    case 401:
        action = function () {
            chrome.tabs.create({
                url: TxtVia.url + '/sign_in?return_url=' + encodeURIComponent(chrome.extension.getURL("/popup.html"))
            });
        };
        message = "Failed to successfully login to TxtVia. \n\rClick here re-authenticate.";
        break;
    case 500:
        message = "Oh my gosh, TxtVia is having a major hickup right now. ";
        break;
    default:
        action = function () {
            Background.Process.Post.client();
        };
        message = "Failed to successfully setup device with TxtVia.\n\r Click here to try again.";
        break;
    }
    notification = webkitNotifications.createNotification(chrome.extension.getURL('/images/icon48.png'), "Awe damn", message);
    notification.onclick = function () {
        action();
        notification.cancel();
    };
    console.log(notification);
    notification.show();
};
Background.notify.message = {};
Background.notify.message.sent = function(message){
    var notification = webkitNotifications.createNotification(chrome.extension.getURL('/images/icon48.png'), "Sent Message", "Your message is on it's way to " + message.recipient);
    notification.ondisplay = function () {
        if ($.parseJSON(localStorage.autoHideNotifications)) {
            setTimeout(function () {
                notification.cancel();
            }, 5000);
        }
    };
    notification.onclick = function () {
        notification.cancel();
    };
    notification.show();
};
Background.notify.message.failed = function (message) {
    var notification = webkitNotifications.createNotification(chrome.extension.getURL('/images/icon48.png'), "Awe damn", "Failed to successfully send a message. \nDon't worry, the message will be delivered soon.");
    notification.ondisplay = function () {
        if ($.parseJSON(localStorage.autoHideNotifications)) {
            setTimeout(function () {
                notification.cancel();
            }, 5000);
        }
    };
    notification.onclick = function () {
        notification.cancel();
    };
    notification.show();
};
Background.notify.message.skipped = function (message) {
    var notification = webkitNotifications.createNotification(chrome.extension.getURL('/images/icon48.png'), "Awe damn", "A messsage has failed to be processed. \n\rThis message is being skipped.");
    // notification.ondisplay = function () {
    //     if (localStorage.autoHideNotifications) {
    //         setTimeout(function () {
    //             notification.cancel();
    //         }, 5000);
    //     }
    // };
    notification.onclick = function () {
        notification.cancel();
    };
    notification.show();
};
Background.notify.syncComplete = function (message) {
    var notification = webkitNotifications.createNotification(chrome.extension.getURL('/images/icon48.png'), "Woohooo", "Your messages and contacts are now synced.");
    notification.ondisplay = function () {
        if ($.parseJSON(localStorage.autoHideNotifications)) {
            setTimeout(function () {
                notification.cancel();
            }, 5000);
        }
    };
    notification.onclick = function () {
        notification.cancel();
    };
    notification.show();
};
Background.connection = function () {
    if (!TxtVia.server && window.navigator.onLine) {
        Pusher.channel_auth_endpoint = TxtVia.url + "/users/auth/client/?auth_token=" + localStorage.authToken;
        switch (TxtVia.PushMethod) {
        case "Pusher":
            console.log("[Background.connection] Using Pusher");
            TxtVia.server = new Pusher(TxtVia.Pusher.webSocketID.toString());
            TxtVia.channel = TxtVia.server.subscribe('txtvia_' + localStorage.authToken);
            TxtVia.channel.bind('subscription_error', function (status) {
                console.error("[WebSocket] gave status code : " + status);
                if (status === 401) {
                    Background.notify.client.failed(status);
                }
            });
            TxtVia.channel.bind('message', function (data) {
                try {
                    TxtVia.WebDB.insertInto.messages(data);
                    Background.notify.newMessage(data);
                } catch (err) {
                    console.error("[WebSocket] Failed to parse message data.");
                    console.error(err);
                }
            });
            TxtVia.channel.bind('device', function (data) {
                try {
                    console.log(data);
                    TxtVia.WebDB.insertInto.devices(data);
                    Background.notify.newDevice(data);
                } catch (err) {
                    console.error("[WebSocket] Failed to parse device data.");
                    console.error(err);
                }
            });
            break;
        case "BeaconPush":
            console.log("[Background.connection] Using BeaconPush");
            Beacon.connect(TxtVia.BeaconPush.webSocketID, ['txtvia'], {
                log: TxtVia.env === "development" ? true : false,
                user: localStorage.authToken
            });
            // Beacon.connect(TxtVia.BeaconPush.webSocketID, ['txtvia']);
            Beacon.listen(function (data) {
                console.log(data);
                var message, device;
                try {
                    if (data.message) {
                        message = $.parseJSON(data.message);
                        TxtVia.WebDB.insertInto.messages(message, function (tx, r) {
                            console.log('inserted');
                            TxtVia.WebDB.lastReceivedMessage(function (tx, r) {
                                console.log('display message');
                                Background.notify.newMessage(r.rows.item(0));
                            });
                        });
                    } else if (data.device) {
                        device = $.parseJSON(data.device);
                        Background.notify.newDevice(device);
                        TxtVia.WebDB.insertInto.devices(device);
                    }
                } catch (err) {
                    console.error("[WebSocket] Failed to parse Beacon Push data.");
                    console.error(err);
                }
            });
            break;
        default:
            TxtVia.PushMethod = "Pusher";
            Background.connection();
            break;
        }
        return TxtVia.server;
    } else {
        setTimeout(Background.connection,1000);
        return TxtVia.server;
    }
};


Background.init();
